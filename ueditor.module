<?php

/**
 * @file
 * UEditor Module for Drupal 7.x
 *
 * UEditor by Baidu <website:> http://ueditor.baidu.com
 * 
 * This module was created by M <55510696 AT qq.com>
 *
 */

/**
 * Implementation of hook_help().
 */
function ueditor_help($path, $args) {
  if( !variable_get('ueditor_global_settings', NULL) ) {
    drupal_set_message('<strong>UEditor:</strong> Please <a href="'.base_path().'?q=admin/config/content/ueditor">CONFIGURE</a> to use.', 'warning');
  }
  switch ($path) {
    case 'admin/help#ueditor':
      return 'Baidu UEditor.';
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function ueditor_menu() {
  $items = array();
  $items['ueditor/%'] = array(
    'title'             => 'UEditor File browser',
    'page callback'     => 'ueditor_file_interface',
    'page arguments'    => array(1),
    'access arguments'  => array('access ueditor fileupload'), //array('access content'),
    'type'              => MENU_CALLBACK,
  );
  $items['admin/config/content/ueditor'] = array(
    'title'             => 'UEditor',
    'description'       => 'Configure the rich text editor.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('ueditor_setting_form'),
    'access arguments'  => array('administer ueditor'),
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/ueditor/add'] = array(
    'title'             => 'Add a new UEditor profile',
    'description'       => 'Configure the rich text editor.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('ueditor_admin_profile_form'),
    'access arguments'  => array('administer ueditor'),
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/ueditor/edit/%'] = array(
    'title'             => 'Edit the UEditor profile',
    'description'       => 'Configure the rich text editor.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('ueditor_admin_profile_form', 5),
    'access arguments'  => array('administer ueditor'),
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/ueditor/delete/%'] = array(
    'title'             => 'Delete the UEditor profile',
    'description'       => 'Configure the rich text editor.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('ueditor_delete_profile_form', 5),
    'access arguments'  => array('administer ueditor'),
    'type'              => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/ueditor/gset'] = array(
    'title'             => 'Edit the UEditor Global Settings',
    'description'       => 'Configure the rich text editor.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('ueditor_global_settings_form'),
    'access arguments'  => array('administer ueditor'),
    'type'              => MENU_NORMAL_ITEM,
  );  
  $items['admin/config/content/ueditor/gset/global'] = array(
    'title' => 'Global',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/content/ueditor/gset/image'] = array(
    'title' => 'Image',
    'description' => 'Configure the image param.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('ueditor_image_settings_form'),
    'access arguments'  => array('administer ueditor'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function ueditor_permission() {
  $permissions = array();
  $permissions['administer ueditor'] = array(
    'title'           => t('Administer UEditor'),
    'restrict access' => TRUE,
  );
  $permissions['access ueditor fileupload'] = array(
    'title'       => t('Access fileupload'),
    'description' => t('access fileupload (image, file, other...)'),
  );
  return $permissions;
}

//@see ueditor_menu
function ueditor_setting_form($form, $form_state) {
  $profiles = ueditor_profile_load();
  $header   = array(t('Profile'), t('Input format'), t('Operations'), t('Order'));
  $rows     = array();
  $options  = range(0, count($profiles));
  foreach($profiles as $p) {
    $element = array(
      '#name'        => 'weight[' . $p->eid . ']',
      '#type'        => 'select',
      '#options'     => $options,
      '#value'       => _ueditor_option_key($options, $p->weight),      
      '#attributes'  => array('class'=>array('ueditor-profile-weight')),
    );
    $rows[] = array(
      'data' => array(
        array('data' => $p->name),
        array('data' => implode("<br />\n", $p->formats)),
        array('data' => l(t('edit'), 'admin/config/content/ueditor/edit/' . $p->eid)
                        . ' '
                        . ($p->eid!=1 ? l(t('delete'), 'admin/config/content/ueditor/delete/' . $p->eid) : '')
        ),
        array('data' => drupal_render($element) ),
      ),
      'class' => array('draggable'),
    );
  }
  $rows[] = array(
    'data' => array(
      array('data' => t('Global Settings')),
      array('data' => variable_get('ueditor_global_settings', NULL) ? '' : '<strong>Please configure this first!</strong>'),
      array('data' => l(t('edit'), 'admin/config/content/ueditor/gset')),
      array('data' => '' ),
    ),
  );
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id'=>'ueditor-profiles-table') ));    
  drupal_add_tabledrag('ueditor-profiles-table', 'order', 'sibling', 'ueditor-profile-weight');
  $form['tables'] = array(
    '#markup' => $output,
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save'),
  );
  $form['new'] = array(
    '#markup' => '<p>' . l(t('Create a new profile'), 'admin/config/content/ueditor/add') . '</p>',
  );
  return $form;
}

//@see ueditor_setting_form
function ueditor_setting_form_submit($form, &$form_state) {
  if(!empty($form_state['input']['weight'])) {
    foreach($form_state['input']['weight'] as $eid=>$weight) {
      db_update('ueditor_settings')
        ->fields(array('weight' => (int) $weight))
        ->condition('eid', (int) $eid)
        ->execute();
    }
  }
  drupal_set_message(t('Your changes have been saved.'));
  $form_state['redirect'] = 'admin/config/content/ueditor';
}

//@see ueditor_menu
function ueditor_global_settings_form($form, $form_state) {
  $settings = variable_get('ueditor_global_settings', NULL);
  $settings = $settings ? unserialize($settings) : ueditor_config_default();
  $suggest  = '<code>Suggested path:</code> sites/default/files/ueditor/<br>';
  $form['global_help'] = array(
    '#markup' => implode('<br>', array(
      '%b' => '<code>%b</code> - the base URL path of the Drupal installation (<code>'._ueditor_realpath('%b').'</code>)',
      '%m' => '<code>%m</code> - path where the UEditor module is stored (<code>'._ueditor_realpath('%m').'</code>)',
      '%l' => '<code>%l</code> - path to the libraries directory (<code>'._ueditor_realpath('%l').'</code>)',
      '%f' => '<code>%f</code> - the Drupal file system path where the files are stored (<code>'._ueditor_realpath('%f').'</code>)',
      '%d' => '<code>%d</code> - the server path to the document root (<code>'._ueditor_realpath('%d').'</code>)',
      '%u' => '<code>%u</code> - User ID (<code>'._ueditor_realpath('%u').'</code>)',
      '<br>',
    )),
    '#prefix' => '<div class="region region-help"><div class="block block-system"><div class="content">',
    '#suffix' => '</div></div></div>',
  );
  $form['global_settings'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('UEditor Global Settings'),
    '#collapsible'  => FALSE,
    '#collapsed'    => FALSE,
  );  
  $form['global_settings']['webAppKey'] = array(
    '#type'           => 'textfield',
    '#title'          => t('webAppKey'),
    '#default_value'  => !empty($settings['webAppKey']) ? $settings['webAppKey'] : '',
    '#description'    => 'baidu web app key. <a target="_blank" href="http://app.baidu.com/static/cms/getapikey.html">get an apikey</a>',
  );
  $imagePath = !empty($settings['imagePath']) ? $settings['imagePath'] : '%f/ueditor/';
  $form['global_settings']['imagePath'] = array(
    '#type'           => 'textfield',
    '#title'          => t('imagePath'),
    '#default_value'  => $imagePath,
    '#description'    => $suggest.'Current path:<code>'._ueditor_realpath($imagePath).'</code>',
  );
  $scrawlPath = !empty($settings['scrawlPath']) ? $settings['scrawlPath'] : '%f/ueditor/';
  $form['global_settings']['scrawlPath'] = array(
    '#type'           => 'textfield',
    '#title'          => t('scrawlPath'),
    '#default_value'  => $scrawlPath,
    '#description'    => $suggest.'Current path:<code>'._ueditor_realpath($scrawlPath).'</code>',
  );
  $filePath = !empty($settings['filePath']) ? $settings['filePath'] : '%f/ueditor/';
  $form['global_settings']['filePath'] = array(
    '#type'           => 'textfield',
    '#title'          => t('filePath'),
    '#default_value'  => $filePath,
    '#description'    => $suggest.'Current path:<code>'._ueditor_realpath($filePath).'</code>',
  );
  $catcherPath = !empty($settings['catcherPath']) ? $settings['catcherPath'] : '%f/ueditor/';
  $form['global_settings']['catcherPath'] = array(
    '#type'           => 'textfield',
    '#title'          => t('catcherPath'),
    '#default_value'  => $catcherPath,
    '#description'    => $suggest.'Current path:<code>'._ueditor_realpath($catcherPath).'</code>',
  );
  $imageManagerPath = !empty($settings['imageManagerPath']) ? $settings['imageManagerPath'] : '%f/ueditor/';
  $form['global_settings']['imageManagerPath'] = array(
    '#type'           => 'textfield',
    '#title'          => t('imageManagerPath'),
    '#default_value'  => $imageManagerPath,
    '#description'    => $suggest.'Current path:<code>'._ueditor_realpath($imageManagerPath).'</code>',
  );
  $form['global_settings']['snapscreenHost'] = array(
    '#type'           => 'textfield',
    '#title'          => t('snapscreenHost'),
    '#default_value'  => !empty($settings['snapscreenHost']) ? $settings['snapscreenHost'] : '127.0.0.1',
    '#description'    => 'snapscreenHost',
  );
  $snapscreenPath = !empty($settings['snapscreenPath']) ? $settings['snapscreenPath'] : '%f/ueditor/';
  $form['global_settings']['snapscreenPath'] = array(
    '#type'           => 'textfield',
    '#title'          => t('snapscreenPath'),
    '#default_value'  => $snapscreenPath,
    '#description'    => $suggest.'Current path:<code>'._ueditor_realpath($snapscreenPath).'</code>',
  );
  $wordImagePath = !empty($settings['wordImagePath']) ? $settings['wordImagePath'] : '%f/ueditor/';
  $form['global_settings']['wordImagePath'] = array(
    '#type'           => 'textfield',
    '#title'          => t('wordImagePath'),
    '#default_value'  => $wordImagePath,
    '#description'    => $suggest.'Current path:<code>'._ueditor_realpath($wordImagePath).'</code>',
  );  
  $form['global_settings']['submit'] = array(
    '#type'           => 'submit',
    '#value'          => t('Save'),
  );
  return $form;
}

//@see ueditor_global_setting_form
function ueditor_global_settings_form_submit($form, &$form_state) {
  $val = $form_state['values'];
  foreach( array('imagePath','scrawlPath','filePath','catcherPath','imageManagerPath','snapscreenPath','wordImagePath') as $k) {
    $val[$k] = _ueditor_realpath($val[$k], TRUE);
  }
  $settings = ueditor_value_to_setting($val, FALSE);
  variable_set('ueditor_global_settings', $settings);
  drupal_set_message(t('Your changes have been saved.'));
  $form_state['redirect'] = 'admin/config/content/ueditor';
}

//@see ueditor_setting_form
function ueditor_profile_load($eid=NULL) {
  global $user;
  $profiles = array();
  $query = db_select('ueditor_settings', 's');
  if(!is_null($eid)) $query->condition('s.eid', (int) $eid);
  $result = $query->fields('s')->orderBy('s.weight','ASC')->orderBy('s.eid','DESC')->execute();
  foreach ($result as $data) {
    $data->settings = unserialize($data->setting);
    $data->formats = array();
    $profiles[$data->eid] = $data;
  }
  $input_formats = filter_formats($user);
  $formats = db_select('ueditor_formats', 'f')->fields('f')->execute();
  foreach ($formats as $data) {
    if (isset($input_formats[$data->format])) {
      $profiles[$data->eid]->formats[$data->format] = $input_formats[$data->format]->name;
    }
  }
  return is_null($eid) ? $profiles : (isset($profiles[$eid]) ? $profiles[$eid] : NULL);
}

//@see ueditor_menu
function ueditor_admin_profile_form($form, $form_state, $eid=NULL) {
  if(!is_null($eid) and $profile = ueditor_profile_load($eid)) {
    $form['eid'] = array(
      '#type'  => 'value',
      '#value' => $eid,
    );
  }
  else {
    $profile = new stdClass;
    $profile->formats  = array();
    $profile->settings = array();
  }
  $input_formats = filter_formats();
  $formats = array();
  foreach ($input_formats as $format) {
    $formats[$format->format] = $format->name;
  }
  $form['basic'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Basic setup'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
  );
  $form['basic']['name'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Profile name'),
    '#default_value'  => isset($profile->name) ? $profile->name : '',
    '#size'           => 40,
    '#maxlength'      => 128,
    '#description'    => t('Enter a name for this profile. This name is only visible within the UEditor administration page.'),
    '#required'       => TRUE,
  );
  $form['basic']['input_formats'] = array(
    '#id'             => 'input-formats',
    '#type'           => 'checkboxes',
    '#title'          => t('Text formats'),
    '#default_value'  => !empty($profile->formats) ? array_keys((array) $profile->formats) : array(),
    '#options'        => $formats,
    '#description'    => t('Choose the text formats where you want to load UEditor.')
  );
  $form['basic']['lang'] = array(
    '#type'           => 'select',
    '#title'          => t('Language'),
    '#default_value'  => !empty($profile->settings['lang']) ? $profile->settings['lang'] : 'zh-cn',
    '#options'        => array('zh-cn'=>'简体中文', 'en' => 'English'),
    '#description'    => t('The language for the UEditor user interface.')
  );
  
  $form['appearance'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Appearance'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
  );
  $form['appearance']['toolbars'] = array(
    '#type'           => 'textarea',
    '#title'          => t('toolbars'),
    '#default_value'  => _ueditor_toolbars($profile->settings),
    '#description'    => t('Enter a comma separated list of toolbars.'),
  );
  
  $form['advanced'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Advanced options'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
  );
  $form['advanced']['allHtmlEnabled'] = array(
    '#type'           => 'select',
    '#title'          => t('allHtmlEnabled'),
    '#options'        => array('Off', 'On'),
    '#default_value'  => !empty($profile->settings['allHtmlEnabled']) ? $profile->settings['allHtmlEnabled'] : 0,
    '#description'    => 'if &lt;on&gt; the whole content with css, html will be submit.',
  );
  $form['advanced']['autoClearEmptyNode'] = array(
    '#type'           => 'select',
    '#title'          => t('autoClearEmptyNode'),
    '#options'        => array('Off', 'On'),
    '#default_value'  => !empty($profile->settings['autoClearEmptyNode']) ? $profile->settings['autoClearEmptyNode'] : 1,
    '#description'    => t('autoClearEmptyNode (e.g. "&lt;/p&gt;").'),
  );
  $form['advanced']['elementPathEnabled'] = array(
    '#type'           => 'select',
    '#title'          => t('elementPathEnabled'),
    '#options'        => array('Off', 'On'),
    '#default_value'  => !empty($profile->settings['elementPathEnabled']) ? $profile->settings['elementPathEnabled'] : 1,
    '#description'    => t('elementPathEnabled.'),
  );
  $form['advanced']['wordCount'] = array(
    '#type'           => 'select',
    '#title'          => t('wordCount'),
    '#options'        => array('Off', 'On'),
    '#default_value'  => !empty($profile->settings['wordCount']) ? $profile->settings['wordCount'] : 1,
    '#description'    => t('wordCount.'),
  );
  $form['advanced']['maximumWords'] = array(
    '#type'           => 'textfield',
    '#title'          => t('maximumWords'),
    '#default_value'  => !empty($profile->settings['maximumWords']) ? $profile->settings['maximumWords'] : '10000',
    '#description'    => t('maximumWords.'),
  );
  $form['advanced']['initialContent'] = array(
    '#type'           => 'textfield',
    '#title'          => t('initialContent'),
    '#default_value'  => !empty($profile->settings['initialContent']) ? $profile->settings['initialContent'] : '',
    '#description'    => t('Default editor content.'),
  );
  $form['advanced']['iframeCssUrl'] = array(
    '#type'           => 'textfield',
    '#title'          => t('CSS file path'),
    '#default_value'  => !empty($profile->settings['iframeCssUrl']) ? $profile->settings['iframeCssUrl'] : '',
    '#description'    => t('Enter the path to the CSS file (Example: "/css/editor.css").'),
  );
  $form['advanced']['minFrameHeight'] = array(
    '#type'           => 'textfield',
    '#title'          => t('min FrameHeight'),
    '#default_value'  => !empty($profile->settings['minFrameHeight']) ? $profile->settings['minFrameHeight'] : '320',
    '#description'    => t('Set min editor_frame height.'),
  );
  $form['advanced']['zIndex'] = array(
    '#type'           => 'textfield',
    '#title'          => t('zIndex'),
    '#default_value'  => !empty($profile->settings['zIndex']) ? $profile->settings['zIndex'] : '900',
    '#description'    => t('Set editor_frame zIndex.'),
  );
  
  drupal_add_js('Drupal.ueditor.admin_profile_form();', array('scope' => 'footer', 'type' => 'inline'));
  
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

//@see ueditor_admin_profile_form
function ueditor_admin_profile_form_submit($form, &$form_state) {
  $val  = $form_state['values'];
  $eid  = isset($val['eid']) ? $val['eid'] : NULL;
  $name = $val['name'];
  $setting = ueditor_value_to_setting($val, FALSE);
  if(is_null($eid)) {
    drupal_set_message(t('Your UEditor profile was created.'));
    $eid = db_insert('ueditor_settings')
            ->fields(array(
              'name'    => $name,
              'setting' => $setting,
            ))
            ->execute();
  }
  else {
    drupal_set_message(t('Your UEditor profile was updated.'));
    db_update('ueditor_settings')
      ->fields(array(
        'name'    => $name,
        'setting' => $setting,
      ))
      ->condition('eid', $eid)
      ->execute();
    db_delete('ueditor_formats')
      ->condition('eid', $eid)
      ->execute();
  }
  if (!empty($val['input_formats'])) {
    foreach (array_keys($val['input_formats']) as $format) {
      if ($val['input_formats'][$format] != '0') {
        db_insert('ueditor_formats')
          ->fields(array(
            'eid'    => $eid,
            'format' => $format,
          ))
          ->execute();
      }
    }
  }
  $form_state['redirect'] = 'admin/config/content/ueditor';
}

//@see ueditor_admin_profile_form
function _ueditor_toolbars($toolbars) {
  if(!empty($toolbars['toolbars'][0])) {
    $t = $toolbars['toolbars'][0];
    return ',' . implode(',', $t);
  }
  return '';
}

//default ueditor config array
function ueditor_config_default() {
  static $config = FALSE;
  if($config === FALSE) {
    $path = base_path() . '?q=';
    $config = array(
      'lang'                => 'zh-cn',
      'initialContent'      => '',
      'iframeCssUrl'        => '',
      'minFrameHeight'      => 320,
      'autoClearEmptyNode'  => TRUE,
      'zIndex'              => 900,
      'toolbars'            => array(
                                array('fullscreen', 'source', '|', 'undo', 'redo', '|', 'bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'removeformat', 'formatmatch','autotypeset', '|', 'blockquote', '|', 'pasteplain', '|', 'forecolor', 'backcolor', 'insertorderedlist', 'insertunorderedlist','selectall', 'cleardoc', '|', 'customstyle', 'paragraph', '|','rowspacingtop', 'rowspacingbottom','lineheight', '|','fontfamily', 'fontsize', '|', 'directionalityltr', 'directionalityrtl', '|', 'indent', '|', 'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|','touppercase','tolowercase','|', 'link', 'unlink', 'anchor', '|', 'imagenone', 'imageleft', 'imageright', 'imagecenter', '|', 'insertimage', 'emotion','scrawl', 'insertvideo', 'attachment', 'map', 'gmap', 'insertframe','highlightcode','webapp','pagebreak','template','background', '|', 'horizontal', 'date', 'time', 'spechars','snapscreen', 'wordimage', '|', 'inserttable', 'deletetable', 'insertparagraphbeforetable', 'insertrow', 'deleterow', 'insertcol', 'deletecol', 'mergecells', 'mergeright', 'mergedown', 'splittocells', 'splittorows', 'splittocols', '|', 'print', 'preview', 'searchreplace','help')
                                ),
      
      'imageUrl'            => $path . 'ueditor/imageup',
      'scrawlUrl'           => $path . 'ueditor/scrawlup',
      'fileUrl'             => $path . 'ueditor/fileup',
      'catcherUrl'          => $path . 'ueditor/getremoteimage',
      'imageManagerUrl'     => $path . 'ueditor/imagemanager',
      'snapscreenServerUrl' => $path . 'ueditor/imageup',
      'wordImageUrl'        => $path . 'ueditor/imageup',
      'getMovieUrl'         => $path . 'ueditor/getmovie',

    );
  }
  return $config;
}

//global settings
function ueditor_global_setting() {
  static $config = FALSE;
  if($config === FALSE) {
    $settings = variable_get('ueditor_global_settings', NULL);
    $config = $settings ? unserialize($settings) : ueditor_config_default();    
  }
  return $config;
}

//@see ueditor_admin_profile_form_submit
function ueditor_value_to_setting($val, $merge=TRUE) {
  unset(
    $val['eid'], 
    $val['name'], 
    $val['input_formats'], 
    $val['op'], 
    $val['submit'], 
    $val['form_build_id'], 
    $val['form_token'], 
    $val['form_id']
  );
  if($merge)
    $val += ueditor_config_default();
  _ueditor_fixed_value($val);
  if(isset($val['toolbars'])) {
    $toolbars = str_replace(array("\r","\n","\t"," "), '', $val['toolbars']);    
    $toolbars = str_replace(',,',',',$toolbars);
    $toolbars = trim($toolbars,',');
    $toolbars = explode(',', $toolbars);
    unset($val['toolbars']);
    $val['toolbars'][] = $toolbars;
  }
  return serialize($val);
}

//@see ueditor_menu
function ueditor_delete_profile_form($form, $form_state, $eid=0) {
  $form = array();
  $form['eid'] = array(
    '#type' => 'value',
    '#value' => $eid,
  );
  $form['question'] = array(
    '#type' => 'item',
    '#markup' => t('Are you sure that you want to delete the UEditor profile?'),
  );
  $form['delete'] = array(
    '#type'  => 'submit',
    '#id'    => 'delete',
    '#value' => t('Delete'),
  );
  $form['back'] = array(
    '#type'  => 'submit',
    '#id'    => 'back',
    '#value' => t('Cancel'),
  );
  return $form;
}

//@see ueditor_delete_profile_form
function ueditor_delete_profile_form_submit($form, &$form_state) {
  $val = $form_state['values'];
  if ($form_state['clicked_button']['#id'] == 'delete') {
    $eid = (int) $val['eid'];
    if($eid == 1) {
      drupal_set_message(t('The default profile can not be deleted.'), 'warning');
      return ;
    }
    drupal_set_message(t('The UEditor profile was deleted.'));    
    db_delete('ueditor_settings')
      ->condition('eid', $eid)
      ->execute();
    db_delete('ueditor_formats')
      ->condition('eid', $eid)
      ->execute();
  }
  $form_state['redirect'] = 'admin/config/content/ueditor';
}

/**
 * Implementation of hook_init().
 */
function ueditor_init() {
  drupal_add_css(drupal_get_path('module', 'ueditor') . '/ueditor/themes/default/ueditor.css');
  drupal_add_js(drupal_get_path('module', 'ueditor') . '/ueditor.js');
}

/**
 * Implementation of hook_element_info_alter().
 */
function ueditor_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'ueditor_pre_render_text_format';
}

//@see ueditor_element_info_alter
function ueditor_pre_render_text_format($element) {
  if (!isset($element['#format'])) {
    return $element;
  }
  if (isset($element['value'])) {
    $element['value'] = ueditor_load_by_field($element['value'], $element['format']['format']);
  }
  return $element;  
}

//@see ueditor_pre_render_text_format
function ueditor_load_by_field($field, $format) {
  static $is_running = FALSE;
  static $processed  = array();
  static $jssetting  = array();
  static $configs    = FALSE;
  static $globals    = FALSE;
  if (!is_array($format)) return $field;
  if (!isset($field['#id'])) return $field;
  if (isset($processed[$field['#id']])) return $field;
  if (key_exists('#wysiwyg', $field) && !$field['#wysiwyg']) return $field;
  if (isset($field['#access']) && !$field['#access']) return $field;
  if ($field['#id'] == "edit-log") return $field;
  if (isset($field['#attributes']['disabled']) && $field['#attributes']['disabled'] == 'disabled') return $field;
  $input_format = isset($format['#value']) ? $format['#value'] : $format['#default_value'];
  drupal_add_js(
    array(
      'ueditor' => array(
        'default_format' => array(
          $field['#id'] => $input_format
        ), 
        'imce' => module_exists('imce'),
        'image' => array(
          'settings' => ueditor_get_image_settings(),
          'watermarkAllowed' => ueditor_image_watermark_allowed_user(),
        ),
      )
    ),
    'setting'
  );
  if(!$configs) $configs = ueditor_profile_load();
  if(!$is_running) {
    drupal_add_js('window.UEDITOR_HOME_URL = "'.base_path().drupal_get_path('module', 'ueditor').'/ueditor/";', array('scope'=>'footer', 'type'=>'inline'));  
    drupal_add_js(drupal_get_path('module', 'ueditor') . '/ueditor/editor_config.js', array('type'=>'file', 'scope'=>'footer'));
    drupal_add_js(drupal_get_path('module', 'ueditor') . '/ueditor/editor_all.js', array('type'=>'file', 'scope'=>'footer'));    
    $is_running = TRUE;
  }
  if($globals === FALSE) {
    $globals = _ueditor_fixed_subpath(ueditor_global_setting());    
  }
  drupal_add_js(array('ueditor' => array('imageStyleWatermark' => empty($globals['imageStyleWatermark']) ? 0 : 1)), 'setting');
  foreach($configs as $config) {
    if(isset($config->formats[$input_format]) and !isset($processed[$field['#id']])) {
      if(!isset($jssetting[$input_format])) {
        $jssetting[$input_format]['ueditor']['input_formats'][$input_format] = $config->settings + $globals + ueditor_config_default();
        drupal_add_js($jssetting[$input_format], 'setting');
      }
      $editor_js = "Drupal.ueditor.render('{$field['#id']}','{$input_format}');";
      drupal_add_js($editor_js, array('scope' => 'footer', 'type' => 'inline'));
      $processed[$field['#id']] = TRUE;
    }
  }
  $field['#ueditor'] = 1;
  return $field;
}

//convert string to js var
function _ueditor_convert_jskey($key) {
  return strtolower(strtr($key, ' -[]', '____'));
}

//get the selected option by value
function _ueditor_option_key($arr, $val, $default=0) {
  foreach($arr as $k=>$v) {
    if($val==$v) return $k;
  }
  return $default;
}

//chage %path to realpath
function _ueditor_realpath($path, $auto=FALSE) {
  global $user;
  $lib_path = 'sites/all/libraries';
  $mod_path = drupal_get_path('module', 'ueditor');
  $path = strtr($path,
    array(
      '%b' => base_path(),
      '%m' => $mod_path,
      '%l' => $lib_path,
      '%f' => variable_get('file_public_path', conf_path() . '/files'),
      '%d' => strtr(DRUPAL_ROOT,'\\','/'),
      '%u' => $user->uid,
    )
  );
  $path = strtr($path, '\\', '/');
  if($auto) $path .= '/';
  $path = str_replace('//', '/', $path);
  $path = str_replace('//', '/', $path);
  if($path !== '/') $path = ltrim($path, '/');
  return $path;
}

//change "0" to false
function _ueditor_fixed_value(&$val) {
  static $changes = array('customDomain','isShow','autoClearinitialContent','focus','autoClearEmptyNode','fullscreen','readonly','imagePopup','pasteplain','allHtmlEnabled','wordCount','elementPathEnabled','autoHeightEnabled','autoFloatEnabled','sourceEditorFirst','imce');
  foreach($changes as $v) {
    if(isset($val[$v]) and empty($val[$v])) $val[$v] = FALSE;
  }
}

//@see ueditor_load_by_field
function _ueditor_fixed_subpath($val) {
  $base_path = base_path();
  foreach( array('imagePath','scrawlPath','filePath','catcherPath','imageManagerPath','snapscreenPath','wordImagePath') as $k) {
    $val[$k] = $base_path . $val[$k];
  }
  return $val;
}


/**
 * For uploaded files
 *
 */

//@see ueditor_menu
function ueditor_file_interface($uptype=NULL) {
  $webroot  = strtr(DRUPAL_ROOT,'\\','/') . '/';
  $settings = variable_get('ueditor_global_settings', NULL) ? ueditor_global_setting() : NULL;
  if(!$settings) return NULL;
  module_load_include('inc', 'ueditor', 'ueditor.upload');
  $upload   = new ueditor_upload(array(
                'webroot'     => $webroot,
                'file_handle' => 'upfile',                
              ));
  $data     = array();
  switch($uptype) {
    case 'imageup_watermark':
      ueditor_image_set_user_config($_POST);
    break;
    case 'imageup':
      $data = $upload->setConfig(array('file_type'=>'image','saved_path'=>$settings['imagePath']))
                     ->doUpload()
                     ->getResult();
      $data['title'] = _ueditor_request_string('pictitle');
    break;
    
    case 'scrawlup':
      $action = _ueditor_request_string('action');
      if($action == 'tmpImg') {
        $data = $upload->setConfig(array('file_type'=>'image','saved_path'=>$settings['scrawlPath']))
                       ->doUpload()
                       ->getResult();
        exit('<script>parent.ue_callback("' . $data['url'] . '","' . $data['state'] . '")</script>');
      }
      else {
        $data = $upload->setConfig(array('file_handle'=>'content','file_type'=>'image','saved_path'=>$settings['scrawlPath']))
                       ->doUpload(TRUE)
                       ->getResult();
      }
    break;
    
    case 'fileup':
      $allowed_exts = array('rar','doc','docx','xls','xlsx','ppt','pptx','zip','pdf','txt','swf');
      module_invoke_all('ueditor_allowed_extensions', $allowed_exts);
      $data = $upload->setConfig(array(
                      'file_type'    => 'file',
                      'saved_path'   => $settings['filePath'],
                      'allowed_exts' => $allowed_exts,
                      'allowed_size' => 10 * 1024 * 1024,
                     ))
                     ->doUpload()
                     ->getResult();
      $data['fileType'] = $data['type'];
    break;
    
    case 'getremoteimage':
      
    break;
    
    case 'imagemanager':
      if (!ueditor_imagemanager_access($settings)) return;
      $files = _ueditor_getfiles($webroot . $settings['imageManagerPath']);
      if ( !$files ) return;
      rsort($files, SORT_STRING);
      $output = '';
      foreach ($files as $file) {
        $output .= $file . 'ue_separate_ue';
      }
      exit($output);
    break;
    
    case 'getmovie':
      $key  = _ueditor_request_string('searchKey');
      $type = _ueditor_request_string('videoType');
      echo _ueditor_file_get_contents('http://api.tudou.com/v3/gw?method=item.search&appKey=myKey&format=json&kw='.$key.'&pageNo=1&pageSize=20&channelId='.$type.'&inDays=7&media=v&sort=s');
    break;
  }
  echo !empty($data) ? json_encode($data) : '';
}

/**
 * Access to manage image.
 *
 * @param $settings
 */
function ueditor_imagemanager_access($settings) {
  if (isset($settings['imageManage']) && (boolean) $settings['imageManage']) {
    global $user;
    if (empty($settings['imageManageRoles'])) {
      return FALSE;
    }
    else {
      $intersect = array_intersect($settings['imageManageRoles'], array_keys($user->roles));
      return empty($intersect) ? FALSE : TRUE;
    }
  }
  return TRUE;
}

//remote file get
function _ueditor_file_get_contents($url, $time=10) {
  $ctx = stream_context_create(array('http'=>array('timeout'=>$time)));
  return file_get_contents($url, null, $ctx);
}

//get all images from a folder
function _ueditor_getfiles($dir, $path='', &$files=array()) {
  $dir = rtrim($dir, '/');
  if ( !is_dir($dir) ) return null;
  $handle = opendir($dir);
  while ( false !== ($file = readdir($handle)) ) {
    if ( $file != '.' && $file != '..' ) {
      $dir2 = $dir . '/' . $file;
      if ( is_dir( $dir2 ) ) {
        $path2 = $path . $file . '/';
        _ueditor_getfiles($dir2, $path2, $files);
      }
      else {
        if ( preg_match("/\.(gif|jpeg|jpg|png|bmp)$/i", $file) ) {
          $files[] = $path . $file;
        }
      }
    }
  }
  return $files;
}

//get request query_string
function _ueditor_request_string($key) {
  $req = isset($_REQUEST[$key]) ? $_REQUEST[$key] : NULL;
  if($req === NULL) {
    $req = isset($_REQUEST['q']) ? $_REQUEST['q'] : NULL;
    if(!is_null($req)) {
      $req = strtr($req,'?','&');
      parse_str($req,$req);
      $req = isset($req[$key]) ? $req[$key] : NULL;
    }
  }
  return $req;
}

/**
 * Default image config.
 */
function ueditor_image_config_default() {
  $config = array();
  $config['styleNeed'] = FALSE;
  $config['styleDefault'] = '';
  $config['watermarkNeed'] = FALSE;
  $config['watermarkAllowedRoles'] = array();
  $config['watermarkAllowedStyles'] = array();
  $config['watermarkCustomStyleBase'] = '';
  $config['manageNeed'] = FALSE;
  $config['manageRoles'] = array();
  return $config;
}

/**
 * Get all image styles.
 */
function ueditor_get_all_image_styles() {
  $styles = image_styles();
  $data = array();
  foreach ($styles as $key => $val) {
    $data[$key] = $key;
  }
  return $data;
}

/**
 * Form : config image.
 */
function ueditor_image_settings_form() {
  $settings = ueditor_get_image_settings();
  $styles = ueditor_get_all_image_styles();
  $form['image_settings']['style'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Style'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
  );
  $form['image_settings']['style']['styleNeed'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Style image when upload'),
    '#default_value'  => isset($settings['styleNeed']) ? $settings['styleNeed'] : FALSE,
  );
  $form['image_settings']['style']['styleDefault'] = array(
    '#title'          => t('Default style'),
    '#type'           => 'radios',
    '#options'        => $styles,
    '#default_value'  => isset($settings['styleDefault']) ? $settings['styleDefault'] : '',
    '#states' => array(
      'visible' => array(
        'input[name="styleNeed"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['image_settings']['style']['watermarkNeed'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Allowed to add watermark'),
    '#default_value'  => isset($settings['watermarkNeed']) ? $settings['watermarkNeed'] : FALSE,
    '#states' => array(
      'visible' => array(
        'input[name="styleNeed"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['image_settings']['style']['watermarkDefaultText'] = array(
    '#title'          => t('Default Text'),
    '#type'           => 'textfield',
    '#default_value'  => isset($settings['watermarkDefaultText']) ? $settings['watermarkDefaultText'] : '',
    '#states' => array(
      'visible' => array(
        'input[name="styleNeed"]' => array('checked' => TRUE),
        'input[name="watermarkNeed"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['image_settings']['style']['watermarkAllowedRoles'] = array(
    '#title'          => t('Allowed watermark roles'),
    '#type'           => 'checkboxes',
    '#options'        => user_roles(),
    '#default_value'  => is_array($settings['watermarkAllowedRoles']) ? $settings['watermarkAllowedRoles'] : array(),
    '#states' => array(
      'visible' => array(
        'input[name="styleNeed"]' => array('checked' => TRUE),
        'input[name="watermarkNeed"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['image_settings']['style']['watermarkAllowedStyles'] = array(
    '#title'          => t('Allowed watermark style'),
    '#type'           => 'checkboxes',
    '#options'        => $styles,
    '#default_value'  => is_array($settings['watermarkAllowedStyles']) ? $settings['watermarkAllowedStyles'] : array(),
    '#states' => array(
      'visible' => array(
        'input[name="styleNeed"]' => array('checked' => TRUE),
        'input[name="watermarkNeed"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['image_settings']['style']['watermarkCustomStyleBase'] = array(
    '#title'          => t('Allowed watermark custom style base'),
    '#type'           => 'radios',
    '#options'        => $styles,
    '#default_value'  => isset($settings['watermarkCustomStyleBase']) ? $settings['watermarkCustomStyleBase'] : '',
    '#states' => array(
      'visible' => array(
        'input[name="styleNeed"]' => array('checked' => TRUE),
        'input[name="watermarkNeed"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['image_settings']['manage'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Manage'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
  );
  $form['image_settings']['manage']['manageNeed'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Set manage image roles'),
    '#default_value'  => isset($settings['manageNeed']) ? $settings['manageNeed'] : FALSE,
  );
  $form['image_settings']['manage']['manageRoles'] = array(
    '#type'           => 'checkboxes',
    '#title'          => t('Roles'),
    '#options'        => user_roles(),
    '#default_value'  => is_array($settings['manageRoles']) ? $settings['manageRoles'] : array(),
    '#states' => array(
      'visible' => array(
        'input[name="manageNeed"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['image_settings']['submit'] = array(
    '#type'           => 'submit',
    '#value'          => t('Save'),
  );
  return $form;
}

/**
 * ueditor_image_settings_form validate handle
 */
function ueditor_image_settings_form_validate($form, &$form_state) {
  $styleDefault = $form_state['values']['styleDefault'];
  $watermarkAllowedRoles = array_values(array_filter($form_state['values']['watermarkAllowedRoles']));
  $watermarkAllowedStyles = array_values(array_filter($form_state['values']['watermarkAllowedStyles']));
  $watermarkCustomStyleBase = $form_state['values']['watermarkCustomStyleBase'];
  $manageRoles = array_values(array_filter($form_state['values']['manageRoles']));
  $watermarkNeed = (boolean) $form_state['values']['watermarkNeed'];
  if ((boolean) $form_state['values']['styleNeed']) {
      if (empty($form_state['values']['styleDefault'])) {
        form_set_error('styleNeed', t("Please set default style name !"));
      }
      if ($watermarkNeed) {
        if (empty($watermarkAllowedRoles)) {
          form_set_error('watermarkAllowedRoles', t("Please set watermark allowed roles !"));
        }
        if (empty($watermarkAllowedStyles)) {
          form_set_error('watermarkAllowedStyles', t("Please set watermark allowed styles !"));
        }
      }
      else {
        $watermarkAllowedRoles = array();
        $watermarkAllowedStyles = array();
        $watermarkCustomStyleBase = '';
      }
  }
  else {
    $styleDefault = '';
    $watermarkNeed = FALSE;
    $watermarkAllowedRoles = array();
    $watermarkAllowedStyles = array();
    $watermarkCustomStyleBase = '';
  }

  if ((boolean) $form_state['values']['manageNeed']) {
    if (empty($manageRoles)) {
      form_set_error('manageRoles', t("Please set manage roles !"));
    }
  }
  else {
    $manageRoles = array();
  }
  form_set_value($form['image_settings']['style']['styleDefault'], $styleDefault, $form_state);
  form_set_value($form['image_settings']['style']['watermarkNeed'], $watermarkNeed, $form_state);
  form_set_value($form['image_settings']['style']['watermarkAllowedRoles'], $watermarkAllowedRoles, $form_state);
  form_set_value($form['image_settings']['style']['watermarkAllowedStyles'], $watermarkAllowedStyles, $form_state);
  form_set_value($form['image_settings']['style']['watermarkCustomStyleBase'], $watermarkCustomStyleBase, $form_state);
  form_set_value($form['image_settings']['manage']['manageRoles'], $manageRoles, $form_state);
}

/**
 * ueditor_image_settings_form submit handle
 */
function ueditor_image_settings_form_submit($form, &$form_state) {
  $settings = array();
  $settings['styleNeed'] = (boolean) $form_state['values']['styleNeed'];
  $settings['styleDefault'] = $form_state['values']['styleDefault'];
  $settings['watermarkNeed'] = $form_state['values']['watermarkNeed'];
  $settings['watermarkDefaultText'] = $form_state['values']['watermarkDefaultText'];
  $settings['watermarkAllowedRoles'] = $form_state['values']['watermarkAllowedRoles'];
  $settings['watermarkAllowedStyles'] = $form_state['values']['watermarkAllowedStyles'];
  $settings['watermarkCustomStyleBase'] = $form_state['values']['watermarkCustomStyleBase'];
  $settings['manageNeed'] = (boolean) $form_state['values']['manageNeed'];
  $settings['manageRoles'] = $form_state['values']['manageRoles'];
  variable_set('ueditor_image_settings', serialize($settings));
  drupal_set_message(t('Your changes have been saved.'));
  $form_state['redirect'] = 'admin/config/content/ueditor';
}

/**
 * Handle user access to watermark.
 *
 * @param $user
 */
function ueditor_image_watermark_allowed_user($user = NULL) {
  $user = isset($user) ? $user : $GLOBALS['user'];
  $settings = ueditor_get_image_settings();
  $intersect = array_intersect(array_keys($user->roles), $settings['watermarkAllowedRoles']);
  return empty($intersect) ? FALSE : TRUE;
}

function ueditor_get_image_settings() {
  $settings = variable_get('ueditor_image_settings', NULL);
  $settings = $settings ? unserialize($settings) : ueditor_image_config_default();
  return $settings;
}

function ueditor_image_set_user_config($p) {
  global $user;
  $config = array();
  $config['watermarkNeed'] = (boolean) $p['watermarkNeed'];
  if ($config['watermarkNeed']) {
    $config['watermarkType'] = $p['watermarkType'];
    $config['watermarkSystem'] = $p['watermarkSystem'];
    $config['watermarkCutomX'] = $p['watermarkCutomX'];
    $config['watermarkCutomY'] = $p['watermarkCutomY'];
    $config['watermarkCutomText'] = $p['watermarkCutomText'];
  }
  db_merge('ueditor_user_config')
    ->key(array('uid' => $user->uid))
    ->fields(array(
      'uid' => $user->uid,
      'config' => serialize($config),
    ))
    ->execute();
}

function ueditor_image_get_user_config($uid = NULL) {
  $uid = isset($uid) ? $uid : $GLOBALS['user']->uid;
  $ret = db_select('ueditor_user_config', 'uuc')->condition('uid', $uid)->fields('uuc', array('config'))->execute()->fetchObject();
  return $ret ? unserialize($ret->config) : array();
}